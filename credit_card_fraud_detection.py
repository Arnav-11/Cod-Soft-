# -*- coding: utf-8 -*-
"""credit-card-fraud-detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16MzXr2kYXQVkfkPICZLUHyCFv30GdaGM
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv("creditcard.csv")

df.head(10)

df.shape

df.describe()

df.info()

df.isna().sum()

"""# Data Cleaning"""

df.duplicated().sum()

df = df.drop_duplicates()

"""# Exploratory Data Analysis (EDA)"""

df["Class"].value_counts()

df["Class"].value_counts().plot(kind = 'pie', autopct="%0.2f%%")

plt.plot(df["Time"])

sns.countplot(df["Class"])

min_val = df['Amount'].min()
max_val = df['Amount'].max()
avg_val = df['Amount'].mean()

plt.figure(figsize=(10, 5))
sns.lineplot(data=df['Amount'], label='Amount')
plt.axhline(y=min_val, color='r', linestyle='-', label=f'Min: {min_val}')
plt.axhline(y=max_val, color='g', linestyle='-', label=f'Max: {max_val}')
plt.axhline(y=avg_val, color='b', linestyle='-', label=f'Average: {avg_val}')
plt.xlabel('Index')
plt.ylabel('Amount')
plt.title('Min, Max, and Average of Amount')
plt.legend()
plt.show()

"""# Model Training and Evaluation"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""# Random Forest Classifier"""

pipe1 = RandomForestClassifier(n_estimators = 20)
pipe1.fit(X_train, y_train)
print("Score of training set",pipe1.score(X_train, y_train))
print("Score of testing set", pipe1.score(X_test, y_test))
y_pred = pipe1.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot = True, fmt ="0.2f")

print(classification_report(y_test, pipe1.predict(X_test)))

from sklearn.metrics import roc_auc_score
from sklearn.metrics import plot_roc_curve
print("Cross Validation Score : ",'{0:.2%}'.format(cross_val_score(pipe1,X_train,y_train,cv = 5,scoring = 'roc_auc').mean()))
print("ROC_AUC Score : ",'{0:.2%}'.format(roc_auc_score(y_test,y_pred)))
plot_roc_curve(pipe1, X_test,y_test)
plt.title('ROC_AUC_Plot')
plt.show()

"""# Decision Tree Classifier"""

pipe = DecisionTreeClassifier()
pipe.fit(X_train, y_train)

print("Score of training set",pipe.score(X_train, y_train))
print("Score of testing set", pipe.score(X_test, y_test))
y_pred = pipe.predict(X_test)

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot = True, fmt ="0.2f")

print(classification_report(y_test, pipe.predict(X_test)))

print("Cross Validation Score : ",'{0:.2%}'.format(cross_val_score(pipe,X_train,y_train,cv = 5,scoring = 'roc_auc').mean()))
print("ROC_AUC Score : ",'{0:.2%}'.format(roc_auc_score(y_test,y_pred)))
plot_roc_curve(pipe, X_test,y_test)
plt.title('ROC_AUC_Plot')
plt.show()